import telebot
from telebot import types
import json
import os
import csv
from datetime import datetime
import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import time
import re


# ================== –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ==================
try:
    bot = telebot.TeleBot('8377973620:AAEcq9MEsqyOSYrCVwo3tTbLRy7x09YHSW4')
    bot_info = bot.get_me()
    print(f"‚úÖ –ë–æ—Ç {bot_info.first_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    exit(1)

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
USERS_FILE = 'users.json'
GOOGLE_SHEETS_URL = "https://docs.google.com/spreadsheets/d/1qsffjxK5k8RZpAViVctPW8_hGmxVxGyrFbcGiBxeh18/edit#gid=0"
SUGGESTIONS_CHANNEL = '-1003025188845'

user_states = {}


# ================== –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì –¢–ê–ë–õ–ò–¶–´ ==================
def load_google_sheets_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –≤ CSV —ç–∫—Å–ø–æ—Ä—Ç
        sheet_id = GOOGLE_SHEETS_URL.split('/d/')[1].split('/')[0]
        csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid=0"

        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑: {csv_url}")
        response = requests.get(csv_url, timeout=30)

        if response.status_code == 200:
            # –ß–∏—Ç–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
            csv_data = response.text
            lines = csv_data.strip().split('\n')

            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            users_data = {}
            headers = []

            for i, line in enumerate(lines):
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —è—á–µ–π–∫–∏
                cells = [cell.strip().strip('"') for cell in line.split(',')]

                # –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if i == 0:
                    print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {cells[:10]}...")  # –ü–µ—Ä–≤—ã–µ 10 –∫–æ–ª–æ–Ω–æ–∫
                    headers = cells
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not any(cells) or len(cells) < 3:
                    continue

                # –ò—â–µ–º ID –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ (–∏–Ω–¥–µ–∫—Å 1)
                user_id = cells[1] if len(cells) > 1 else None

                if user_id and user_id.isdigit():
                    user_name = cells[2] if len(cells) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    print(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id}, Name={user_name}")

                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    scores = {}
                    total_score = 0

                    # –ë–∞–ª–ª—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 5–π –∫–æ–ª–æ–Ω–∫–∏ (–∏–Ω–¥–µ–∫—Å 4)
                    for j in range(4, len(cells)):
                        if j < len(headers) and j < len(cells):
                            column_name = headers[j] if j < len(headers) else f"Column_{j}"
                            cell_value = cells[j]

                            if cell_value and cell_value.strip():
                                try:
                                    score = float(cell_value.replace(',', '.'))
                                    scores[column_name] = score
                                    total_score += score
                                    print(f"   üìä {column_name}: {score} –±–∞–ª–ª–æ–≤")
                                except ValueError:
                                    # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                                    scores[column_name] = cell_value

                    users_data[user_id] = {
                        'name': user_name,
                        'scores': scores,
                        'total_score': total_score,
                        'raw_data': cells  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    }

            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")
            return users_data

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: HTTP {response.status_code}")
            return {}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")
        import traceback
        traceback.print_exc()
        return {}


def get_user_history(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users_data = load_google_sheets_data()
    user_id_str = str(user_id)

    print(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id_str}")
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ ID: {list(users_data.keys())}")

    if user_id_str in users_data:
        user_data = users_data[user_id_str]
        history = []

        for task_name, score in user_data['scores'].items():
            if isinstance(score, (int, float)):
                history.append({
                    'task': task_name,
                    'score': score,
                    'date': '2024-2025',
                    'description': f'–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è "{task_name}"'
                })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –±–∞–ª–ª–æ–≤
        history.sort(key=lambda x: x['score'], reverse=True)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è {user_id_str}: {len(history)}")
        return history
    else:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")
        print(f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ ID: {list(users_data.keys())}")
        return []


def calculate_balance(user_id):
    """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±–∞–ª–ª–æ–≤"""
    history = get_user_history(user_id)
    return sum(record['score'] for record in history)


# ================== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ==================
def load_users():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}


def save_users(users_dict):
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_dict, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


def send_suggestion_to_channel(user_info, suggestion_text):
    try:
        message_text = f"üí° –ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï\n\nüë§ –û—Ç: {user_info['first_name']}\nüÜî ID: {user_info['user_id']}\n"
        if user_info.get('username'):
            message_text += f"üì± Username: @{user_info['username']}\n"
        message_text += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\nüìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n{suggestion_text}"

        bot.send_message(SUGGESTIONS_CHANNEL, message_text)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False


# ================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ==================
print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
users = load_users()
print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==================
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if user_id not in users:
        users[user_id] = {
            'first_name': first_name,
            'username': message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
            'is_new': True,
            'visit_count': 1,
            'registered_at': datetime.now().isoformat()
        }
    else:
        users[user_id]['visit_count'] += 1
        users[user_id]['is_new'] = False

    save_users(users)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π", "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "‚≠ê –û—Ç–∑—ã–≤—ã", "üìã –ü—Ä–∞–≤–∏–ª–∞", "‚ö° –®—Ç—Ä–∞—Ñ—ã", "üõí –ü–æ–∫—É–ø–∫–∏",
        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "üêõ –û—Ç–ª–∞–¥–∫–∞", "üìã –°–ø–∏—Å–æ–∫ ID"
    ]
    for btn_text in buttons:
        markup.add(types.KeyboardButton(btn_text))

    bot.send_message(user_id, f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def handle_messages(message):
    user_id = str(message.from_user.id)

    if user_id in user_states and user_states[user_id] == 'waiting_suggestion':
        handle_suggestion(message)
        return

    handlers = {
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å": show_profile,
        "üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π": show_history,
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": show_suggestions_menu,
        "‚≠ê –û—Ç–∑—ã–≤—ã": show_reviews,
        "üìã –ü—Ä–∞–≤–∏–ª–∞": show_rules,
        "‚ö° –®—Ç—Ä–∞—Ñ—ã": show_penalties,
        "üõí –ü–æ–∫—É–ø–∫–∏": show_purchases,
        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å": lambda msg: bot.send_message(user_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"),
        "üêõ –û—Ç–ª–∞–¥–∫–∞": show_debug_info,
        "üìã –°–ø–∏—Å–æ–∫ ID": show_available_ids
    }

    if message.text in handlers:
        handlers[message.text](message)


def show_profile(message):
    user_id = str(message.from_user.id)
    balance = calculate_balance(user_id)
    history = get_user_history(user_id)

    profile_text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
    profile_text += f"üÜî ID: {user_id}\n"
    profile_text += f"üë§ –ò–º—è: {message.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"üì± Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    profile_text += f"üí∞ –û–±—â–∏–π –±–∞–ª–ª: {balance}\n"
    profile_text += f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(history)}\n\n"

    if history:
        profile_text += "‚úÖ –í—ã –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤"
    else:
        profile_text += "‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤\n"
        profile_text += "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–µ–π"

    bot.send_message(user_id, profile_text)


def show_history(message):
    user_id = str(message.from_user.id)

    bot.send_message(user_id, "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Google Sheets...")

    history = get_user_history(user_id)

    if history:
        history_text = f"üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π\n\n"
        history_text += f"–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {len(history)}\n"
        history_text += f"–û–±—â–∏–π –±–∞–ª–ª: {calculate_balance(user_id)}\n\n"

        for i, record in enumerate(history, 1):
            task = record.get('task', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
            score = record.get('score', 0)

            history_text += f"{i}. üéØ {task}\n"
            history_text += f"   ‚≠ê –ë–∞–ª–ª—ã: {score}\n\n"

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 10 –∑–∞–ø–∏—Å—è–º–∏
            if i >= 10:
                history_text += f"... –∏ –µ—â–µ {len(history) - 10} –∑–∞–¥–∞–Ω–∏–π\n"
                break

    else:
        history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π\n\n"
        history_text += "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
        history_text += f"üÜî –í–∞—à ID: {user_id}\n"
        history_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –°–ø–∏—Å–æ–∫ ID' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID"

    bot.send_message(user_id, history_text)


def show_available_ids(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ ID –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    user_id = str(message.from_user.id)

    bot.send_message(user_id, "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")

    users_data = load_google_sheets_data()

    if users_data:
        ids_text = "üìã –°–ø–∏—Å–æ–∫ ID –≤ —Ç–∞–±–ª–∏—Ü–µ:\n\n"

        for i, (uid, data) in enumerate(users_data.items(), 1):
            name = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            total = data.get('total_score', 0)
            ids_text += f"{i}. üÜî {uid} - {name} (–≤—Å–µ–≥–æ: {total} –±–∞–ª–ª–æ–≤)\n"

            if i >= 15:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                ids_text += f"\n... –∏ –µ—â–µ {len(users_data) - 15} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                break

        ids_text += f"\n\nüîç –í–∞—à ID: {user_id}"
        if user_id in users_data:
            ids_text += " ‚úÖ –ù–ê–ô–î–ï–ù –í –¢–ê–ë–õ–ò–¶–ï"
        else:
            ids_text += " ‚ùå –ù–ï –ù–ê–ô–î–ï–ù –í –¢–ê–ë–õ–ò–¶–ï"

    else:
        ids_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"

    bot.send_message(user_id, ids_text)


def show_debug_info(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    user_id = str(message.from_user.id)

    debug_text = "üêõ –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n\n"
    debug_text += f"üÜî –í–∞—à ID: {user_id}\n"

    users_data = load_google_sheets_data()
    debug_text += f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(users_data)}\n"

    if user_id in users_data:
        user_data = users_data[user_id]
        debug_text += f"‚úÖ –í—ã –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–∞–∫: {user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        debug_text += f"üìà –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {user_data.get('total_score', 0)}\n"
        debug_text += f"üìã –ó–∞–¥–∞–Ω–∏–π: {len(user_data.get('scores', {}))}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞–Ω–∏—è
        scores = user_data.get('scores', {})
        if scores:
            debug_text += "\n–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π:\n"
            for i, (task, score) in enumerate(list(scores.items())[:3], 1):
                debug_text += f"{i}. {task}: {score}\n"
    else:
        debug_text += "‚ùå –í—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ\n"
        debug_text += f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ ID: {', '.join(list(users_data.keys())[:10])}"

    bot.send_message(user_id, debug_text)


def show_suggestions_menu(message):
    user_id = str(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    user_states[user_id] = 'waiting_suggestion'
    bot.send_message(user_id, "üí° –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=markup)


def handle_suggestion(message):
    user_id = str(message.from_user.id)
    suggestion_text = message.text

    if suggestion_text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = None
        start(message)
        return

    if len(suggestion_text.strip()) < 10:
        bot.send_message(user_id, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.")
        return

    user_info = {
        'user_id': user_id,
        'first_name': message.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        'username': message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    }

    if send_suggestion_to_channel(user_info, suggestion_text):
        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")

    user_states[user_id] = None
    start(message)


def show_reviews(message):
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url="https://t.me/sovunia_1")
    markup.add(btn)
    bot.send_message(user_id, "‚≠ê –û—Ç–∑—ã–≤—ã\n\n–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ:", reply_markup=markup)


def show_rules(message):
    rules_text = "üìã –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n\nüéì –ó–∞ –æ–±—É—á–µ–Ω–∏–µ..."
    bot.send_message(message.from_user.id, rules_text)


def show_penalties(message):
    penalties_text = "‚ö° –®—Ç—Ä–∞—Ñ—ã\n\n‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏—è..."
    bot.send_message(message.from_user.id, penalties_text)


def show_purchases(message):
    purchases_text = "üõí –ü–æ–∫—É–ø–∫–∏ –∑–∞ –±–∞–ª–ª—ã\n\nüéÅ –ë–æ–Ω—É—Å—ã..."
    bot.send_message(message.from_user.id, purchases_text)


# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
if __name__ == '__main__':
    print("=" * 50)
    print("üöÄ –ë–û–¢ –° –£–õ–£–ß–®–ï–ù–ù–´–ú –ü–û–ò–°–ö–û–ú ID")
    print("=" * 50)

    # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–∞–±–ª–∏—Ü—ã...")
    test_data = load_google_sheets_data()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(test_data)}")
    if test_data:
        print(f"üìã –ü—Ä–∏–º–µ—Ä—ã ID: {list(test_data.keys())[:5]}")

    try:
        bot.polling(none_stop=True, interval=3, timeout=60)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")